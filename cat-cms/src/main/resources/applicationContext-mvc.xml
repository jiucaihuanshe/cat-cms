<?xml version="1.0" encoding="UTF-8"?>
<!-- 添加spring配置文件 -->
<beans default-lazy-init="true"
    xmlns="http://www.springframework.org/schema/beans" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd" > 
      <!-- Spring mvc 配置 -->
       <!-- 自动扫描该包 -->
    <context:component-scan base-package="com.cat" />
    <!-- 启用MVC注解-->
    <mvc:annotation-driven />
    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".html"></property>
    </bean>
    <!--引入外部配置文件  由于后期可能会引入多个配置文件 所以采用list的形式  -->
	<bean id="propertyPlaceholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/redis.properties</value>
			</list>
		</property>
	</bean>
    <!-- 加载properties文件,配置DRUID数据源 -->
    <util:properties id="cfg" location="classpath:config.properties"/>
    <!--配置DruidDataSource连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			destroy-method="close" init-method="init" lazy-init="true">
			<property name="driverClassName" value="#{cfg.driver}" />
			<property name="url" value="#{cfg.url}" />
			<property name="username" value="#{cfg.username}" />
			<property name="password" value="#{cfg.password}" />
	</bean>
    <!-- 添加mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource" />
	   <!-- 添加mybatis-config.xml的配置 -->
	   <property name="configLocation" value="classpath:mapper/mybatis-config.xml"></property>
	   <!-- 自动扫描mapping.xml文件 -->
	   <property name="mapperLocations" >
			<list><value>classpath:mapper/sys/*.xml</value></list>
	   </property>
	</bean>
    <!-- Mapper接口所在包，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cat.sys.mapper"/>
	</bean>
    
    <!-- ******Spring整合Shiro的配置********* -->
    <!-- 自定义Realm -->
    <bean id="userRealm" class="com.cat.sys.service.realm.ShiroUserRealm">
    	<!-- 配置凭证算法匹配器 -->
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"/>
    			<!-- <property name="hashIterations" value="1024"/> -->
    		</bean>
    	</property>
    </bean>
    <!-- 配置shiro安全管理器,是shiro框架的核心安全管理器 -->
     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
         <property name="realm" ref="userRealm"></property>
         
        <!-- 记住我 设置securityManager安全管理器的rememberMeManager -->
         <property name="rememberMeManager" ref="rememberMeManager"/>
        <!--  <property name="cacheManager" ref="shiroCacheManager"></property>
          注入session管理器
        <property name="sessionManager" ref="sessionManager" /> -->
     </bean>
    <!-- shiro工厂bean配置 -->
     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
         <!-- shiro的核心安全接口 -->
         <property name="securityManager" ref="securityManager"/>
          <!-- 要求登录时的连接 -->
        <property name="loginUrl" value="/loginUI.do"></property>
         <!-- 登录成功后要跳转的连接(此处已经在登录中处理了) -->
         <!-- <property name="successUrl" value="/index.jsp"></property> -->
         <!-- 访问未对其授权的资源时,要跳转的连接 
         <property name="unauthorizedUrl" value="/default.html"></property>-->
         <!-- shiro连接约束配置 -->
         <property name="filterChainDefinitions">
             <value>
                 <!-- 对静态资源设置允许匿名访问 -->
                 /bower_components/** = anon
                 /build/** = anon
                 /dist/** = anon
                 /plugins/** = anon
                 <!-- 可匿名访问路径，例如：验证码、登录连接、退出连接等 -->
                 /doLogin.do = anon
                 <!-- 退出 -->
                 /doLogout.do = logout  <!-- 会调用Subject的logout方法,此方法会将session清空 -->
                 <!-- 剩余其他路径，必须认证通过才可以访问 -->
                 /login.html = authc
                 <!-- /** = user 表示访问该地址的用户是身份验证通过或RememberMe登录的都可以 -->
                /** = user
                 
                <!-- /** = authc -->
             </value>
         </property>
     </bean>
	<!--Shiro生命周期处理器,Shiro框架会负责Shiro各种组件的生命周期-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!--启用shiro注解权限检查-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	    depends-on="lifecycleBeanPostProcessor"/>
	<bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMeCookie：即记住我的Cookie，保存时长10天；rememberMe管理器，cipherKey是加密rememberMe Cookie的密钥；默认AES算法 -->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>
	<!-- remenberMe配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    	<!-- rememberMe是cookie的名字 -->
        <constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true"/> <!-- 只支持http -->
		<property name="maxAge" value="864000"/> <!-- 记住密码10天 -->
	</bean>

	<!-- *****Spring声明式事务处理***** -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--设置注解驱动的事务管理 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
</beans>
